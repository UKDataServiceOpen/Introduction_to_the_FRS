[
  {
    "objectID": "FRS_get_familiar_1.html",
    "href": "FRS_get_familiar_1.html",
    "title": "Getting familiar with the Family Resources Survey using R",
    "section": "",
    "text": "This exercise is part of the ‘Getting started with ADD MODULE NAME’ online module.\nIn the exercise, we examine data from the Family Resources Survey 2021/2022 financial year and explore:"
  },
  {
    "objectID": "FRS_get_familiar_1.html#getting-started",
    "href": "FRS_get_familiar_1.html#getting-started",
    "title": "Getting familiar with the Family Resources Survey using R",
    "section": "Getting started",
    "text": "Getting started\nData can be accessed from the UK Data Service website following registration.\nTo follow along with the exercise you will need to download the SPSS data format from the UK Data Service website. After saving the file on your machine, unzip everything and make sure the folder “UKDA-9073-spss” is placed in the folder which contains the R project FRS.Rproj and R script files FRS_get_familiar.qmd that you have obtained from the Github repository \nThe FRS is a big survey, as a result, the data is organised in multiple files. However, in this exercise, we will be using only two or three of these data files.\nUsing an R project (.Rproj) offers a structured, isolated, and reproducible working environment.\n\nSetting up R\nTo begin with, we need to load all R packages we will be using for this exercise. When using R and writing R scripts, it is good practice to have all the packages needed for analysis at the beginning of an R script.\n\nlibrary(dplyr) # Data manipulation functions\nlibrary(haven) # Importing Stata/SPSS files\nlibrary(Hmisc) # Extra statistical functions\nlibrary(tidyverse) #Data manipulation and visualization.\nlibrary(janitor) #Data cleaning and summary table\nlibrary(knitr) #Tables in Quarto\nlibrary(DescTools) #Weighting\n#Load the data files we are using in this exercise\nfrs_adult2122 &lt;- read_spss (\"UKDA-9073-spss/spss/spss25/adult.sav\")\nfrs_benunit2122 &lt;- read_spss (\"UKDA-9073-spss/spss/spss25/benunit.sav\")"
  },
  {
    "objectID": "FRS_get_familiar_1.html#explore-the-data-sets",
    "href": "FRS_get_familiar_1.html#explore-the-data-sets",
    "title": "Getting familiar with the Family Resources Survey using R",
    "section": "Explore the data sets",
    "text": "Explore the data sets\nTo begin with, we will be focusing on exploring the “adult.sav” and “benunit.sav” datasets. The “adult.sav” file contains 590 variables while the “benunit.sav” file has 275 variables. We will only be using a few of these variables. As a result, it is better for us to create two subsets of the data, containing only the variables we are interested in.\nNOTE: These two files have different units of analysis. The “adult.sav” file contains data at the individual level while the “benunit.sav” file has data at the benefit unit level (see the FRS documentation for the definition of a benefit unit)\n\n#use a pipeline (the %&gt;% operator) \n#and the \"select\" function from the dplyr package\n#the code below only selects the variables we are interested in\nfrs_adult2122_short &lt;- frs_adult2122 %&gt;% select (SERNUM, BENUNIT, PERSON, GROSS4, HAPPYWB, ANXIOUS, SEX, IAGEGR4)\n\nfrs_benunit2122_short &lt;- frs_benunit2122 %&gt;% select (SERNUM, BENUNIT, FAMTYPBU)\n\nStart by getting an overall feel of the two data sets.\nWe will start with the “adult” dataset. Either inspect variables and cases in the data editor or use the code below to produce a summary of all the variables in the dataset.\n\ndim(frs_adult2122_short) #Gives the number of rows (observations) and columns (variables)\n\n[1] 27508     8\n\nnames(frs_adult2122_short) #List variable names in their actual order in the dataset\n\n[1] \"SERNUM\"  \"BENUNIT\" \"PERSON\"  \"GROSS4\"  \"HAPPYWB\" \"ANXIOUS\" \"SEX\"    \n[8] \"IAGEGR4\"\n\nhead(data.frame(frs_adult2122_short)) #Displays the first few rows of a data frame\n\n  SERNUM BENUNIT PERSON GROSS4 HAPPYWB ANXIOUS SEX IAGEGR4\n1      1       1      1   1419       7       2   1      15\n2      1       1      2   1419       7       7   2      14\n3      2       1      1    177       7       0   2      12\n4      2       1      2    177       9       0   1      12\n5      3       1      1   8962       7       2   2       6\n6      3       1      2   8962      NA      NA   1       6\n\n#you can use tail(data.frame(frs_adult2122_short)) to display the last few rows of a data frame\n\nNow let’s also have a quick look at the “benunit” dataset.\n\ndim(frs_benunit2122_short) #Gives the number of rows (observations) and columns (variables)\n\n[1] 18541     3\n\nnames(frs_benunit2122_short) #List variable names in their actual order in the dataset\n\n[1] \"SERNUM\"   \"BENUNIT\"  \"FAMTYPBU\"\n\nhead(data.frame(frs_benunit2122_short)) #Displays the first few lines of a data frame\n\n  SERNUM BENUNIT FAMTYPBU\n1      1       1        1\n2      2       1        4\n3      3       1        4\n4      4       1        6\n5      5       1        3\n6      6       1        5\n\n\nQuestions\n\nWhat is the overall sample size of each of the data sets?\nHow many variables are there in the short adult dataset?\n\nNow, let’s learn more about the available variables.\nNote: In traditional statistical software packages like SPSS or Stata, categorical variables are often represented as numeric codes with attached labels that convey their substantive meaning. R on the other hand allows for the use of alphanumeric variables or a specialised type of categorical variable known as ‘factors’. Factors in R can be ordered or unordered and are a fundamental aspect of R’s categorical data handling.\nThe Haven R package, which we use in this course, facilitates the conversion of categorical data from SPSS or Stata to R. While it can preserve the original numeric values it also contains attributes, which are special types of R objects with a name, accessible via the attr() function. In this context, each variable has two key attributes: a ‘label’, which is a description of the variable, and ‘labels’, which are the value labels.\nFurthermore, the Haven R package allows for the conversion of these imported numeric variables into R factors. In this conversion, the factors are created with levels (i.e., categories) reflecting the value labels from SPSS or Stata. This approach offers a streamlined method to handle and analyse categorical data in R, bridging the gap between different statistical software methodologies.\nLet’s examine the original variables’ description and value labels.\n\n#the cat and names functions are only used in this case to make the output look better, but you do not need to use them\ncat(attr(frs_adult2122_short$HAPPYWB,\"label\"))\n\nHow happy did you feel yesterday?\n\nnames(attr(frs_adult2122_short$HAPPYWB,\"labels\"))\n\n [1] \"Not at all happy\" \"1\"                \"2\"                \"3\"               \n [5] \"4\"                \"5\"                \"6\"                \"7\"               \n [9] \"8\"                \"9\"                \"Completely happy\"\n\ncat(attr(frs_adult2122_short$ANXIOUS,\"label\"))\n\nHow anxious did you feel yesterday?\n\nnames(attr(frs_adult2122_short$ANXIOUS,\"labels\"))\n\n [1] \"Not at all anxious\" \"1\"                  \"2\"                 \n [4] \"3\"                  \"4\"                  \"5\"                 \n [7] \"6\"                  \"7\"                  \"8\"                 \n[10] \"9\"                  \"Completely anxious\"\n\ncat(attr(frs_adult2122_short$IAGEGR4,\"label\"))\n\nIndividual Adult 5 Year Age Bands - Anon.\n\nnames(attr(frs_adult2122_short$IAGEGR4,\"labels\"))\n\n [1] \"Age 16 to 19\"   \"Age 20 to 24\"   \"Age 25 to 29\"   \"Age 30 to 34\"  \n [5] \"Age 35 to 39\"   \"Age 40 to 44\"   \"Age 45 to 49\"   \"Age 50 to 54\"  \n [9] \"Age 55 to 59\"   \"Age 60 to 64\"   \"Age 65 to 69\"   \"Age 70 to 74\"  \n[13] \"Age 75 or over\"\n\ncat(attr(frs_benunit2122_short$FAMTYPBU,\"label\"))\n\nFamily Type\n\nnames(attr(frs_benunit2122_short$FAMTYPBU,\"labels\"))\n\n[1] \"Any other category\"      \"Pensioner couple\"       \n[3] \"Pensioner single\"        \"Couple with children\"   \n[5] \"Couple without children\" \"Lone parent\"            \n[7] \"Single without children\"\n\n\nQuestions\n3. What do the variables measure and how?"
  },
  {
    "objectID": "FRS_get_familiar_1.html#merging-data-sets",
    "href": "FRS_get_familiar_1.html#merging-data-sets",
    "title": "Getting familiar with the Family Resources Survey using R",
    "section": "Merging data sets",
    "text": "Merging data sets\nWhy do we merge data? Merging datasets allows us to combine information from different sources to enhance the depth of our analysis. This is particularly relevant when dealing with survey data that captures different dimensions of information at multiple levels, such as individual and benefit unit levels.\nBy merging data that captures information at different levels we can examine how individual characteristics interact with benefit-unit-level variables to influence outcomes of interest. In this we might want to examine the relationship between individual happiness and family type. This requires assigning the benefit unit level variable to every individuals within that unit, before we can analyse it further.\nHow do we merge data? In order to effectively merge datasets you need to use common identifiers - unique keys present across all datasets involved in the merge. In this case, the FRS documentation provides us with the necessary information: what are the available identifiers and how to use them depending which datasets we want to merge.\nIn our case the SERNUM and BENUNIT variables are needed to merge the two datasets. Sernum represents the unique serial number of the household, and Benunit represents the identifier for the benefit unit (family) in the household.\n\n#specify which datasets to merge and which columns to use for merging\nmerged_data &lt;- merge(frs_adult2122_short, frs_benunit2122_short, by = c(\"SERNUM\", \"BENUNIT\"))\n\nQuestions\n4. How many variables do we have in the new merge_data?"
  },
  {
    "objectID": "FRS_get_familiar_1.html#missing-values",
    "href": "FRS_get_familiar_1.html#missing-values",
    "title": "Getting familiar with the Family Resources Survey using R",
    "section": "Missing values",
    "text": "Missing values\nLet’s now examine the frequency of our wellbeing variables.\nWe will temporarily convert the variables into factors using `as_factor()` and `mutate()` for a more meaningful output.\nReview the frequency tables, examining the missing values.\n\n#the code below displays the results in a nice table  \nmerged_data %&gt;%\n  select(HAPPYWB, ANXIOUS) %&gt;% # Select variables\n  mutate(across(everything(), as.factor)) %&gt;% # Convert all selected variables to factors\n  pivot_longer(cols = everything(), names_to = \"Variable\", values_to = \"Category\") %&gt;% # Pivot data for easier counting\n  group_by(Variable, Category) %&gt;%\n  summarise(Count = n(), .groups = 'drop') %&gt;% # Summarise counts\n  pivot_wider(names_from = Variable, values_from = Count) %&gt;% # Pivot data to have variables as columns\n  adorn_totals(\"row\") %&gt;% # Optionally, add totals row\n  kable() # Display as a nice table \n\n\n\n\nCategory\nANXIOUS\nHAPPYWB\n\n\n\n\n0\n5890\n185\n\n\n1\n1870\n140\n\n\n2\n2606\n299\n\n\n3\n1663\n484\n\n\n4\n1210\n635\n\n\n5\n1933\n1633\n\n\n6\n1114\n1572\n\n\n7\n1173\n3153\n\n\n8\n1083\n4869\n\n\n9\n429\n3123\n\n\n10\n376\n3254\n\n\nNA\n8161\n8161\n\n\nTotal\n27508\n27508\n\n\n\n\n\nQuestions\n5. Why do you think there are so many system missing values (NA) for each of the well-being variables?\nNote, you can use the documentation to check if needed (see [FRS documentation]).\nWhat does this mean when it comes to interpreting the percentages?\nNote: For ease of interpretation, we are converting the original numeric FAMTYPBU variable into labeled factors using as_factor(), so that they directly display the value labels.\n\nmerged_data$FAMTYPBU &lt;- as_factor(merged_data$FAMTYPBU)\nmerged_data$IAGEGR4 &lt;- as_factor(merged_data$IAGEGR4)\n\n#drop the \"Any other category\" level from the variable as it did not apply to anyone in the data\nmerged_data$FAMTYPBU &lt;- droplevels(merged_data$FAMTYPBU)"
  },
  {
    "objectID": "FRS_get_familiar_1.html#compare-unweighted-and-weighted-proportions",
    "href": "FRS_get_familiar_1.html#compare-unweighted-and-weighted-proportions",
    "title": "Getting familiar with the Family Resources Survey using R",
    "section": "Compare unweighted and weighted proportions",
    "text": "Compare unweighted and weighted proportions\nLet’s examine the unweighted responses first.\nThe `xtabs()` function can be used for categorical variables and the `summary()` function for continuous ones.\n\nround(            ### Round the results to one decimal\n  100*            ### Convert proportions to %  \n    prop.table(   ### Compute proportions\n      xtabs(~FAMTYPBU,merged_data) ### Compute frequencies\n    ),\n  1)\n\nFAMTYPBU\n       Pensioner couple        Pensioner single    Couple with children \n                   20.8                    11.4                    21.2 \nCouple without children             Lone parent Single without children \n                   23.7                     3.6                    19.3 \n\nround(            ### Round the results to one decimal\n  100*            ### Convert proportions to %  \n    prop.table(   ### Compute proportions\n      xtabs(~IAGEGR4,merged_data) ### Compute frequencies\n    ),\n  1)\n\nIAGEGR4\n  Age 16 to 19   Age 20 to 24   Age 25 to 29   Age 30 to 34   Age 35 to 39 \n           1.2            3.7            5.5            7.0            7.6 \n  Age 40 to 44   Age 45 to 49   Age 50 to 54   Age 55 to 59   Age 60 to 64 \n           7.4            7.2            8.4            9.2            9.6 \n  Age 65 to 69   Age 70 to 74 Age 75 or over \n           9.6            9.6           14.0 \n\n#unweigthed summary results\nsummary(merged_data$HAPPYWB)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n  0.000   6.000   8.000   7.443   9.000  10.000    8161 \n\nsummary(merged_data$ANXIOUS)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n  0.000   0.000   2.000   2.985   5.000  10.000    8161 \n\n\nWhat is the (unweighted) percentage of individuals living in an couple without children? Would this be representative of the population?\nLet’s compare with the weighted frequencies. We will use the wtd.table() from the Hmisc package. The weights are specified after the variable for which we request the frequencies in the command below.\n\n# Raw output\nwtd.table(merged_data$FAMTYPBU,weights=merged_data$GROSS4)\n\n$x\n[1] \"Pensioner couple\"        \"Pensioner single\"       \n[3] \"Couple with children\"    \"Couple without children\"\n[5] \"Lone parent\"             \"Single without children\"\n\n$sum.of.weights\n[1]  7609640  4323246 11834547 13939344  1888755 12300368\n\n# Converted into proportions            \nround(\n  100*\n    prop.table(\n      wtd.table(merged_data$FAMTYPBU,weights=merged_data$GROSS4)$sum.of.weights),\n  1)\n\n[1] 14.7  8.3 22.8 26.9  3.6 23.7\n\n\nNow what is the representative proportion of couples without children? 26.9, is this higher or lower than the unweighted proportion?\nLet’s look at the relation between family type and happiness and compare the unweighted and weighted results?\n\n#unweighted\nmerged_data %&gt;% \n  group_by(FAMTYPBU) %&gt;% \n  summarise (happiness = round(mean(HAPPYWB, na.rm=TRUE),2))\n\n# A tibble: 6 × 2\n  FAMTYPBU                happiness\n  &lt;fct&gt;                       &lt;dbl&gt;\n1 Pensioner couple             7.96\n2 Pensioner single             7.45\n3 Couple with children         7.56\n4 Couple without children      7.62\n5 Lone parent                  6.91\n6 Single without children      6.74\n\n#weighted\nmerged_data %&gt;% \n  group_by(FAMTYPBU) %&gt;% \n  summarise (happiness = round(weighted.mean(HAPPYWB,GROSS4, na.rm=TRUE),2))\n\n# A tibble: 6 × 2\n  FAMTYPBU                happiness\n  &lt;fct&gt;                       &lt;dbl&gt;\n1 Pensioner couple             7.89\n2 Pensioner single             7.41\n3 Couple with children         7.53\n4 Couple without children      7.54\n5 Lone parent                  6.84\n6 Single without children      6.8 \n\n\nIs there a difference between the results? Why do you thin there might or not be a difference?\n\n#unweighted\nmerged_data %&gt;% \n  group_by(IAGEGR4) %&gt;% \n  summarise (happiness = round(mean(HAPPYWB, na.rm=TRUE),2))\n\n# A tibble: 13 × 2\n   IAGEGR4        happiness\n   &lt;fct&gt;              &lt;dbl&gt;\n 1 Age 16 to 19        7.25\n 2 Age 20 to 24        7.18\n 3 Age 25 to 29        7.37\n 4 Age 30 to 34        7.33\n 5 Age 35 to 39        7.33\n 6 Age 40 to 44        7.23\n 7 Age 45 to 49        7.14\n 8 Age 50 to 54        7.19\n 9 Age 55 to 59        7.24\n10 Age 60 to 64        7.41\n11 Age 65 to 69        7.69\n12 Age 70 to 74        7.8 \n13 Age 75 or over      7.72\n\n#weighted\nmerged_data %&gt;% \n  group_by(IAGEGR4) %&gt;% \n  summarise (happiness = round(weighted.mean(HAPPYWB,GROSS4, na.rm=TRUE),2))\n\n# A tibble: 13 × 2\n   IAGEGR4        happiness\n   &lt;fct&gt;              &lt;dbl&gt;\n 1 Age 16 to 19        7.38\n 2 Age 20 to 24        7.15\n 3 Age 25 to 29        7.41\n 4 Age 30 to 34        7.28\n 5 Age 35 to 39        7.37\n 6 Age 40 to 44        7.13\n 7 Age 45 to 49        7.14\n 8 Age 50 to 54        7.2 \n 9 Age 55 to 59        7.23\n10 Age 60 to 64        7.41\n11 Age 65 to 69        7.58\n12 Age 70 to 74        7.7 \n13 Age 75 or over      7.71"
  },
  {
    "objectID": "FRS_get_familiar_1.html#confidence-intervals",
    "href": "FRS_get_familiar_1.html#confidence-intervals",
    "title": "Getting familiar with the Family Resources Survey using R",
    "section": "Confidence intervals",
    "text": "Confidence intervals\nSo far, we have just computed point estimates without worrying about their precision. We can compute confidence intervals to indicate the precision (uncertainty) of our estimates.\nConfidence intervals for numerical variables: Numerous R packages provide functionalities for calculating confidence intervals and standard errors for means. However, here we emphasise manual computation to gain a deeper understanding of the underlying processes.\nUnder the assumption of simple random sampling, a 95% confidence interval for the mean is calculated as the mean plus or minus 1.96 times the standard error of the mean. The standard error of the mean itself is the standard error of the mean (that is, the square root of its variance) divided by the square of the sample size. Since we have functions for computing weighted means and variance in R, we can compute:\n\nm.p.happy&lt;-wtd.mean(merged_data$HAPPYWB,weights=merged_data$GROSS4)\nse.p.happy&lt;-sqrt(wtd.var(merged_data$HAPPYWB,weights=merged_data$GROSS4))\nn.happy&lt;-sum(merged_data$GROSS4[!is.na(merged_data$HAPPYWB)])\n\nci.happy&lt;-c(m.p.happy,m.p.happy-1.96*(se.p.happy/sqrt(n.happy)),\n            m.p.happy+1.96*(se.p.happy/sqrt(n.happy)))\nci.happy\n\n[1] 7.374589 7.373868 7.375309\n\nm.p.anxious&lt;-wtd.mean(merged_data$ANXIOUS,weights=merged_data$GROSS4)\nse.p.anxious&lt;-sqrt(wtd.var(merged_data$ANXIOUS,weights=merged_data$GROSS4))\nn.anxious&lt;-sum(merged_data$GROSS4[!is.na(merged_data$ANXIOUS)])\n\nci.anxious&lt;-c(m.p.anxious,m.p.anxious-1.96*(se.p.anxious/sqrt(n.anxious)),\n              m.p.anxious+1.96*(se.p.anxious/sqrt(n.anxious)))\nci.anxious\n\n[1] 3.059913 3.058935 3.060891\n\n\nQuestions\n\nHow happy are people overall on a scale of 0 to 10?\n\nConfidence intervals for categorical variables: The DescTools package provides MultinomCI() a handy function to compute confidence intervals for multinomial proportions.\nWe need to provide MultinomCI() with two parameters: the frequencies for which we would like a confidence interval, and the confidence interval we want.\n\n# Calculate the frequency table of the variable\ncategory_freq &lt;- table(merged_data$FAMTYPBU)\n\n# Calculate the multinomial confidence intervals\nci_results &lt;-round(((MultinomCI(category_freq, conf.level = 0.95))*100),1)\n\n# View results\nci_results\n\n                         est lwr.ci upr.ci\nPensioner couple        20.8   20.2   21.4\nPensioner single        11.4   10.8   12.0\nCouple with children    21.2   20.6   21.8\nCouple without children 23.7   23.1   24.3\nLone parent              3.6    3.0    4.3\nSingle without children 19.3   18.7   19.9"
  },
  {
    "objectID": "FRS_get_familiar_1.html#answers",
    "href": "FRS_get_familiar_1.html#answers",
    "title": "Getting familiar with the Family Resources Survey using R",
    "section": "Answers",
    "text": "Answers\n\nThere are 27508 cases in the adult dataset and 18541 in the benunit dataset.\nThe total number of variables is 8 in the adult dataset and 3 in the benunit dataset.\nFor example, HAPPYWB records responses to the questions of “How happy did you feel yesterday?” on a scale of ‘Not at all happy’ to ‘Completely happy’. The FAMTYPBU from the benunit dataset provides the family type.\nThere are a total of 9 variables in the new merged data.\nThe wellbeing variables cannot be answered by proxy, so if the person is not present to answer then no answer is recorded.\nPeople are relatively happy, with an average of 7.4 out of 10."
  }
]